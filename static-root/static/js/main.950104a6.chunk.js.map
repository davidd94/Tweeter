{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","send","loadTweets","map","tweet","idx","Tweet","key","ActionParent","setLikes","userLiked","setUserLiked","ActionBtn","action","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.950104a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\n\nimport {loadTweets} from '../lookup';\n\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef();\n    const [newTweets, setNewTweets] = useState([]);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const newVal = textAreaRef.current.value;\n        let tempNewTweets = [...newTweets];\n\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 9999\n        })\n\n        setNewTweets(tempNewTweets);\n        textAreaRef.current.value = '';\n    };\n\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n        <TweetsList newTweets={newTweets} />\n    </div>;\n};\n  \nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets : []);\n    const [tweets, setTweets] = useState([]); \n\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit);\n        if (final.length !== tweets.length) {\n            setTweets(final);\n        };\n        \n    }, [props.newTweets, tweets, tweetsInit]);\n\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            setTweetsInit(response);\n        };\n\n        loadTweets(myCallback);\n    }, []);\n\n    return tweets.map((tweet, idx) => {\n        return <Tweet tweet={tweet} key={idx} className='my-5 py-5 border bg-white text-dark' />\n    })\n}\n\nfunction ActionParent(props) {\n    const {tweet} = props;\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\n    const [userLiked, setUserLiked] = useState(false);\n    \n    return <div className='btn btn-group'>\n        <ActionBtn tweet={props.tweet} likes={likes} setLikes={setLikes} userLiked={userLiked} setUserLiked={setUserLiked} action={{type: \"like\", display: \"Likes\"}} />\n        <ActionBtn tweet={props.tweet} likes={likes} setLikes={setLikes} userLiked={userLiked} setUserLiked={setUserLiked} action={{type: \"unlike\", display: \"Unlikes\"}} />\n        <ActionBtn tweet={props.tweet} action={{type: \"retweet\", display: \"Retweet\"}} />\n    </div>\n}\n\nexport function ActionBtn(props) {\n    const {action} = props; // shortcut to access props.action and props.tweet directly\n    \n    const handleClick = (event) => {\n        event.preventDefault();\n        if (action.type === 'like') {\n            if (props.userLiked === false) {\n                props.setLikes(props.likes + 1);\n                props.setUserLiked(true);\n            };\n        } else if (action.type === 'unlike') {\n            if (props.userLiked === true) {\n                props.setLikes(props.likes - 1);\n                props.setUserLiked(false);\n            };\n        };\n    };\n    \n    const display = action.type === 'like' ? `${props.likes} ${action.display}` : action.display;\n\n    return <button className='btn btn-primary btn-sm' onClick={handleClick}>{display}</button>;\n  };\n  \nexport function Tweet(props) {\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n    return <div className={className}>\n        <p key={`id-${props.idx}`}>{props.tweet.content}</p>\n        <ActionParent tweet={props.tweet} />\n    </div>;\n};","\n\nexport function loadTweets(callback) {\n    const xhr = new XMLHttpRequest();\n    const method = 'GET';\n    const url = 'http://localhost:8000/api/tweets/';\n    const responseType = 'json';\n\n    xhr.responseType = responseType;\n    xhr.open(method, url);\n\n    xhr.onload = () => {\n        callback((xhr.response), xhr.status);\n    };\n    xhr.onerror = () => {\n        callback({\"message\": \"There was an error with the request\"}, 400);\n    };\n\n    xhr.send();\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Tweet something :)\n        </p>\n        \n        <div>\n          <TweetsComponent />\n        </div>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}